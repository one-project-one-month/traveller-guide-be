openapi: 3.1.0
info:
  title: Turning Point API
  version: 1.0.0
  description: API documentation for Turning Point
servers:
  - url: https://turning-point-be.on.shiper.app/api/v1
    description: Development server
  - url: http://localhost:4000/api/v1
    description: Local server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    AccessTokenHeader:
      in: header
      name: x-access-token
      required: true
      schema:
        type: string
      example: validAccessTokenHere
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  schemas:
    BaseResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
            - fail
            - error
          example: success
        message:
          type: string
          example: Operation completed successfully
    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
        - passwordConfirmation
      properties:
        name:
          type: string
          example: John Doe
          description: User's name
        email:
          type: string
          format: email
          example: user@example.com
          description: User's email address
        password:
          type: string
          minLength: 8
          pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).{8,}$
          example: Password123
          description: Password must contain at least 8 characters with uppercase, lowercase and number
        passwordConfirmation:
          type: string
          example: Password123
          description: Must match the password field
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
          description: Registered email address
        password:
          type: string
          example: Password123
          description: User's password
  responses:
    BadRequest:
      description: Bad request - Invalid input data
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - type: object
                properties:
                  status:
                    example: fail
                  message:
                    example: 'Validation failed: passwordConfirmation: Password Confirmation is required'
                  data:
                    type: object
                    example: {}
    Unauthorized:
      description: Unauthorized - Authentication required
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - type: object
                properties:
                  status:
                    example: error
                  message:
                    example: Authentication required
                  code:
                    type: string
                    example: UNAUTHORIZED
    Forbidden:
      description: Forbidden - Insufficient permissions
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - type: object
                properties:
                  status:
                    example: error
                  message:
                    example: Insufficient permissions
                  code:
                    type: string
                    example: FORBIDDEN
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - type: object
                properties:
                  status:
                    example: error
                  message:
                    example: Resource not found
                  code:
                    type: string
                    example: NOT_FOUND
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/BaseResponse'
              - type: object
                properties:
                  status:
                    example: error
                  message:
                    example: Internal server error
                  code:
                    type: string
                    example: INTERNAL_ERROR
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account with name, email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              valid_request:
                summary: Valid registration request
                value:
                  name: John Doe
                  email: john.doe@example.com
                  password: Password123
                  passwordConfirmation: Password123
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              examples:
                success_response:
                  summary: Successful registration
                  value:
                    status: success
                    message: Account created successfully
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        id: '1'
                        email: john.doe@example.com
                        name: John Doe
                        profile_photo: null
                        is_active: true
                        created_at: '2025-09-28T13:26:38.884Z'
                        updated_at: '2025-09-28T13:26:38.884Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email already exists
          content:
            application/json:
              examples:
                email_exists:
                  summary: Email already registered
                  value:
                    status: fail
                    message: 'Duplicate value(s): email'
                    data: {}
  /auth/login:
    post:
      summary: Login user
      description: Authenticate user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              valid_login:
                summary: Valid login request
                value:
                  email: john.doe@example.com
                  password: Password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              examples:
                success_login:
                  summary: Successful login
                  value:
                    status: success
                    message: Login successful
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      user:
                        id: '1'
                        email: john.doe@example.com
                        name: John Doe
                        profile_photo: null
                        is_active: true
                        created_at: '2025-09-28T13:26:38.884Z'
                        updated_at: '2025-09-28T13:26:38.884Z'
        '400':
          description: Invalid credentials
          content:
            application/json:
              examples:
                invalid_credentials:
                  summary: Wrong email or password
                  value:
                    status: fail
                    message: Invalid email or password
                    data: {}
  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generate new tokens using refresh token
      tags:
        - Authentication
      parameters:
        - in: header
          name: x-refresh-token
          required: true
          schema:
            type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              examples:
                token_refreshed:
                  summary: Successfully refreshed tokens
                  value:
                    status: success
                    message: Tokens refreshed successfully
                    data:
                      accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                      refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              examples:
                invalid_refresh_token:
                  summary: Invalid refresh token
                  value:
                    status: fail
                    message: Invalid or expired refresh token
                    data: {}
